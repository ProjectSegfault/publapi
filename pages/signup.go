package pages

import (
	"fmt"
	"os"

	"github.com/gofiber/fiber/v2"

	"github.com/sethvargo/go-password/password"

	"github.com/containrrr/shoutrrr"

	"go.uber.org/zap"
)

// SignupPage is the signup page handler
func SignupPage(c *fiber.Ctx) error {
	// set up logger
	logger, _ := zap.NewProduction()
	defer logger.Sync()

	username := c.FormValue("username")
	email := c.FormValue("email")
	if username == "" || email == "" {
		logger.Error("username or email is empty", zap.String("username", username), zap.String("email", email))
		return c.SendStatus(fiber.StatusBadRequest)
	}

	// generate password
	pass, err := password.Generate(30, 10, 10, false, false)
	if err != nil {
		logger.Error("failed to generate password", zap.Error(err))
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	// create user file
	f, err := os.Create("/var/publapi/users/" + username + ".sh")
	if err != nil {
		logger.Error("failed to create user file", zap.Error(err))
		return c.SendStatus(fiber.StatusInternalServerError)
	}
	defer f.Close()

	bashscript := "#!/bin/bash \n" +
		"# Path: /var/publapi/users/.sh\n" +
		"# This file is generated by publapi. Do not edit this file.\n" +
		"useradd -Um -s /bin/bash " + username + "\n" +
		"printf %s\n%s\n" + pass + " " + pass + " | passwd " + username + "\n" +
		"echo " + username + "'s account has been created!"

	fmt.Println(bashscript)

	// write to file
	_, err = f.WriteString(bashscript)
	if err != nil {
		logger.Error("failed to write to user file", zap.Error(err))
		return c.SendStatus(fiber.StatusInternalServerError)
	}

	// send notification to admins
	err = shoutrrr.Send(os.Getenv("PUBLAPI_SHOUTRRRURL"), "New user signup! Please review /var/publapi/users/"+username+".sh to approve or deny the user.")
	if err != nil {
		logger.Error("failed to send notification to admins", zap.Error(err))
		return c.SendStatus(fiber.StatusInternalServerError)
	}
	return c.JSON(fiber.Map{
		"username": username,
		"message":  "User created! Please allow us 24 hours or more to review your account.",
		"status":   c.Response().StatusCode(),
	})

}
